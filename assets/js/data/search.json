[ { "title": "Ros2 Foxy All In One Installation", "url": "/posts/ros2-foxy-all-in-one-installation/", "categories": "", "tags": "", "date": "2022-04-01 00:00:00 +0900", "snippet": "ROS 2 Foxy All in One 파일 하나로 설치1. ROS 2 Foxy Installation Bash Shell 파일 다운로드 ROS 2 Foxy를 한번에 All in one 파일로 설치하기 위해 Shell 파일을 다운로드 $ wget http://raw.githubusercontent.com/neoplanetz/Neoplanetz.github.io/main/install_ros_foxy.sh 2. 파일 권한 설정 및 ROS 2 Foxy 한방 설치 다운받은 파일에 읽기 권한을 부여하고 설치 shell 파일 실행 $ chmod 755 ./install_ros_foxy.sh &amp;&amp; bash ./install_ros_foxy.sh 3. ROS 2 Foxy All in One 파일에 포함된 패키지 및 어플리케이션 ROS 2 Foxy Desktop Gazebo 11 Simulator for ROS 2 Visual Studio Code" }, { "title": "Install Nvidia Graphic Driver", "url": "/posts/install-nvidia-graphic-driver/", "categories": "", "tags": "", "date": "2022-03-30 00:00:00 +0900", "snippet": "Nvidia Graphic Driver 설치법1. Nvidia 그래픽 카드 확인 본인 PC에 장착된 Nvidia 그래픽 카드 확인 # 장착된 장치 확인$ ubuntu-drivers devices== /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 ==modalias : pci:v000010DEd00001B80sv0000103Csd000082FBbc03sc00i00vendor : NVIDIA Corporationmodel : GP104 [GeForce GTX 1080]driver : nvidia-driver-418-server - distro non-freedriver : nvidia-driver-390 - distro non-freedriver : nvidia-driver-510 - distro non-freedriver : nvidia-driver-470-server - distro non-freedriver : nvidia-driver-470 - distro non-free recommendeddriver : nvidia-driver-450-server - distro non-freedriver : nvidia-driver-510-server - distro non-freedriver : xserver-xorg-video-nouveau - distro free builtin 현재 장착된 그래픽카드는 GTX 1080이고 추천하는 드라이버는 nvidia-driver-470 버전 2. 해당되는 추천 Nvidia 그래픽 드라이버 설치 본인 PC에 장착된 그래픽 카드에 맞는 드라이버 설치 (2 방법 중 1개 선택해 설치) # 1. 해당 장치에 맞는 드라이버 자동 설치$ sudo ubuntu-drivers autoinstall# 2. 수동 설치$ sudo apt install nvidia-driver-470 -y 3. Nvidia 그래픽 카드 설치 완료 그래픽 드라이버 설치 후 재부팅 하면 설정 완료 $ sudo reboot " }, { "title": "Install Gazebo11 Simulator For Ros2", "url": "/posts/install-gazebo11-simulator-for-ros2/", "categories": "", "tags": "", "date": "2022-03-29 00:00:00 +0900", "snippet": "ROS 2를 위한 Gazebo 11 Robot Simulator 설치법1. Gazebo 11 Simulator 설치 Gazebo Key 다운로드 및 Repository 추가하여 설치 $ sudo sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main\" &gt; /etc/apt/sources.list.d/gazebo-stable.list'$ wget https://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -$ sudo apt update &amp; sudo apt install gazebo11 libgazebo11-dev -y Gazebo ROS 패키지 설치 $ sudo apt install ros-foxy-gazebo-ros-pkgs -y 2. Gazebo 11 Simulator 실행 $ gazebo" }, { "title": "Install Ros2 Foxy", "url": "/posts/install-ros2-foxy/", "categories": "", "tags": "", "date": "2022-03-28 00:00:00 +0900", "snippet": "ROS 2 Foxy 설치 및 환경 설정 (Ubuntu 20.04 Focal Fossa)1. ROS 2 Foxy 설치 locale 설정 $ sudo apt update &amp;&amp; sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 $ export LANG=en_US.UTF-8 ROS 2 Key 다운로드 및 ROS 2 저장소 추가 $ sudo apt update &amp;&amp; sudo apt install curl gnupg2 lsb-release -y $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg $ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null ROS 2 Foxy Desktop 및 Fast RTPS, Cyclone DDS, 그리고 유용한 패키지들 설치 $ sudo apt update $ sudo apt install ros-foxy-desktop ros-foxy-rmw-fastrtps* ros-foxy-rmw-cyclonedds* # Install additional useful packages $ sudo apt install ros-foxy-rqt* ros-foxy-image-view ros-foxy-navigation2 ros-foxy-nav2-bringup ros-foxy-joint-state-publisher-gui ros-foxy-xacro 설치된 ROS 2 환경 설정 등록 $ source /opt/ros/foxy/setup.bash 2. ROS 개발 툴 패키지 설치 추가적으로 ROS 개발시 필요한 툴 패키지 설치 $ sudo apt update &amp;&amp; sudo apt install -y \\ build-essential \\ cmake \\ git \\ libbullet-dev \\ python3-colcon-common-extensions \\ python3-flake8 \\ python3-pip \\ python3-pytest-cov \\ python3-rosdep \\ python3-setuptools \\ python3-vcstool \\ wget \\ gpg # install some pip packages needed for testing $ python3 -m pip install -U \\ argcomplete \\ flake8-blind-except \\ flake8-builtins \\ flake8-class-newline \\ flake8-comprehensions \\ flake8-deprecated \\ flake8-docstrings \\ flake8-import-order \\ flake8-quotes \\ pytest-repeat \\ pytest-rerunfailures \\ pytest # install Fast-RTPS and Cyclone DDS dependencies $ sudo apt install --no-install-recommends -y \\ libasio-dev \\ libtinyxml2-dev \\ libcunit1-dev 3. 유용한 환경변수 및 alias를 bashrc 에 설정 추가하기 Add some alias and environment path in bashrc file Bashrc 에 유용한 환경변수와 alias를 추가하여 ros 명령어들을 편하게 사용 할 수 있도록 설정 $ sudo gedit ~/.bashrc Bashrc File (~/.bashrc) # Add some variables in bashrc file# ROS 2 Setupsource /opt/ros/foxy/setup.bashsource ~/ros2_ws/install/local_setup.bash source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bashsource /usr/share/vcstool-completion/vcs.bashsource /usr/share/colcon_cd/function/colcon_cd.shexport _colcon_cd_root=~/ros2_ws export ROS_DOMAIN_ID=7export ROS_NAMESPACE=robot1 export RMW_IMPLEMENTATION=rmw_fastrtps_cpp# export RMW_IMPLEMENTATION=rmw_connext_cpp# export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp# export RMW_IMPLEMENTATION=rmw_gurumdds_cpp # export RCUTILS_CONSOLE_OUTPUT_FORMAT='[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})'export RCUTILS_CONSOLE_OUTPUT_FORMAT='[{severity}]: {message}'export RCUTILS_COLORIZED_OUTPUT=1export RCUTILS_LOGGING_USE_STDOUT=0export RCUTILS_LOGGING_BUFFERED_STREAM=1 # Alias Settingalias cw='cd ~/ros2_ws'alias cs='cd ~/ros2_ws/src'alias ccd='colcon_cd' alias cb='cd ~/ros2_ws&amp;&amp; colcon build --symlink-install'alias cbs='colcon build --symlink-install'alias cbp='colcon build --symlink-install --packages-select'alias cbu='colcon build --symlink-install --packages-up-to'alias ct='colcon test'alias ctp='colcon test --packages-select'alias ctr='colcon test-result' alias rt='ros2 topic list'alias re='ros2 topic echo'alias rn='ros2 node list' alias killgazebo='killall -9 gazebo &amp; killall -9 gzserver &amp; killall -9 gzclient' alias af='ament_flake8'alias ac='ament_cpplint' alias testpub='ros2 run demo_nodes_cpp talker'alias testsub='ros2 run demo_nodes_cpp listener'alias testpubimg='ros2 run image_tools cam2image'alias testsubimg='ros2 run image_tools showimage' 4. Colcon Build 테스트 빌드를 위한 워크스페이스 폴더를 생성 (폴더명은 자유롭게 변경가능(ros2_ws)) $ mkdir -p ~/ros2_ws/src $ cd ~/ros2_ws Colcon 빌드 테스트를 위해 ros2 example 코드를 clone $ source /opt/ros/foxy/setup.bash $ cd ~/ros2_ws/src $ git clone https://github.com/ros2/examples $ cd examples $ git checkout $ROS_DISTRO Colcon 빌드를 수행 $ cd ~/ros2_ws $ colcon build --symlink-install 5. 간단한 ROS 2 Node 테스트 기본적인 node 테스트를 통해 설치한 ROS 2 가 정상 작동하는지 확인 # Run Publisher $ ros2 run demo_nodes_cpp talker # Run Subscriber $ ros2 run demo_nodes_py listener " }, { "title": "Install Terminator", "url": "/posts/install-terminator/", "categories": "", "tags": "", "date": "2022-03-27 00:00:00 +0900", "snippet": "Terminator 설치 및 단축키 문제 해결 및 사용법1. Terminator 설치$ sudo apt install terminator -y2. 수직으로 창 나누기 단축키 문제 해결하기 기본적으로 수직 창 나누기 단축키는 Ctrl + Shift + E 인데, 우분투 20.04 버전에서는 Emoji 단축키가 Ctrl + Shift + E 로 동일해서 터미네이터 수직 창 나누기 단축키가 작동하지 않음 이 문제를 해결하기위해 Emoji 단축키를 설정 해제하여 문제를 해결 우선, 새롭게 터미널을 열어 아래와 같이 ibus 설정창의 띄움$ ibus-setup ‘IBus Preferences’의 ‘Emoji’ 메뉴로 이동하여 ‘…‘버튼을 선택 현재 등록되어있는 단축키를 선택 후, Delete 버튼을 눌러 삭제하고 OK 버튼 선택 Removing Emoji Shortcut key is complete to use ‘Split Vertical’ shortcut in Terminator 3. Terminator 설정 파일 세부 수정 추가적으로 Terminator 의 세부적인 설정을 변경하려면 아래의 경로의 config 파일을 열어 원하는 옵션을 변경한다gedit ~/.config/terminator/config Terminator Config File (~/.config/terminator/config)[global_config] handle_size = 0 focus = system[keybindings][layouts] [[default]] [[[child1]]] parent = window0 type = Terminal [[[window0]]] parent = \"\" size = 1200, 600 type = Window[plugins][profiles] [[default]] scrollbar_position = hidden scrollback_infinite = True use_system_font = False background_darkness = 0.9 background_type = transparent background_image = None show_titlebar = False font = D2Coding 124. Terminator 기본 단축키 사용법** 위/아래로 화면 나누기 :  Ctrl +  Shift + O 좌/우로 화면 나누기 :  Ctrl + Shift + E 현재 화면 닫기 : Ctrl + Shift + W 화면간 이동 : Alt + 방향키 스크롤바 Toggle : Ctrl + Shift + S 검색 :  Ctrl + Shift + F 화면 Clear :  Ctrl + Shift + G" }, { "title": "Install Korean Inputkey In Ubuntu 20 Focal", "url": "/posts/install-korean-inputkey-in-ubuntu-20-focal/", "categories": "", "tags": "", "date": "2022-03-26 00:00:00 +0900", "snippet": "Ubuntu 20.04 한글입력기 추가하기1. 새로운 언어 추가팩 설치 윈도우키 + A (윈도우 유저) 또는 커맨드키 + A (Mac 유저)를 눌러 모든 어플리케이션을 띄운 후, 설정(Settings)으로 이동 설정 왼쪽 메뉴 중 ‘Regions &amp; Language’로 들어간 후, 플러스 버튼을 누르고 기본 ‘Korean’을 추가 ‘Language support is not installed completely’ 라는 창이 뜨면 Install 을 선택해 추가 폰트들을 설치 새롭게 추가된 폰트를 적용하기위해 컴퓨터를 재부팅 2. 새로운 한국어 (한글) 입력 추가 다시 설정으로 이동하여 ‘Region &amp; Language’ 메뉴를 선택 플러스 버튼을 눌러 ‘Korean’ 에 ‘Korean (Hangul)’을 추가하고, 이전에 추가했던 ‘Korean’은 휴지통 버튼을 눌러 삭제하면 한글입력기 설치 완료 3. 한국어/영어 입력 변환 단축키 추가 등록 만약 한/영 변환키를 추가로 단축키 설정하고 싶으면 ‘Korean (Hangul)’의 오른쪽에 톱니바퀴를 눌러 설정에 들어가서 ‘Hangul Toggle Key’의 Add를 눌러 원하는 한/영 변환 단축키를 등록하고 Apply 후 OK로 설정을 마무리 기본적으로 한/영 변환 단축키는 ‘Shift + Space’ 버튼으로 구성되어있고, 위와 같이 ‘한/영 변환 키보드(Atl-R)’을 등록해 사용할 수 있음 " }, { "title": "Ros2 Environment Settings For Vscode", "url": "/posts/ros2-environment-settings-for-vscode/", "categories": "", "tags": "", "date": "2022-03-25 00:00:00 +0900", "snippet": "VS Code용 ROS2 환경설정 및 Debug 설정방법 (2022.03.25)1. Visual Studio Code 설치 VS Code를 다운로드 및 설치 (https://code.visualstudio.com/Download) VS Code 실행하여 Extensions 설치 C/C++/Python Extensions (VS Code Extensions for C++ and Python) Name Code Name Description C/C++ ms-vscode.cpptools C/C ++ IntelliSense, 디버깅 및 코드 검색 CMake twxs.cmake CMake 언어 지원 CMake Tools ms-vscode.cmake-tools CMake 언어 지원 및 다양한 툴 Python ms-python.python 린팅, 디버깅, Intellisense, 코드 서식 지정, 리팩토링, 단위 테스트 등 ROS Extensions (VS Code Extensions for ROS, URDF, Colcon) Name Code Name Description ROS ms-iot.vscode-ros ROS 개발 지원 URDF smilerobotics.urdf URDF / xacro 지원 Colcon Tasks deitry.colcon-helper Colcon 명령어를 위한 VSCode Task File Format Extensions (VS Code Extensions for XML, YAML, Markdown) Name Code Name Description XML Tools dotjoshjohnson.xml XML, XQuery, XPath 지원 YAML redhat.vscode-yaml YAML 지원 Markdown All in One yzhang.markdown-all-in-one Markdown 지원 유용한 Extensions (VS Code Extensions for Etc.) Name Code Name Description Highlight Trailing White Spaces ybaumes.highlight-trailing-white-spaces 의미 없이 사용된 공백의 스페이스 문자 강조 EOF Mark msfukui.eof-mark [EOF]이 없이 끝난 파일에 [EOF] 문자 추가 Better Comments aaron-bond.better-comments alert, informational, TODO 등의 코멘트 강화 기능 2. Visual Studio Code 개발환경 설정1) ROS WorkSpace 설정 Visual Studio Code에서 File에서 “ Add Folder to Workspace”를 선택하여 ROS2 설치시 설정한 workspace 폴더를 연다. Workspace 폴더명 예시: /home/username/ros2_ws 2) User Setting(Settings.json) 설정 ‘settings.json’은 VSCode의 사용자별 글로벌 환경 설정을 지정하는 파일이다. 이 파일에 기술된 설정들은 모든 작업 공간(workspace)에서 적용된다. 예를 들어, 미니맵 사용, 세로 제한 줄 표시, 탭 사이즈 등 이다. ROS 관련 설정 ROS Distibute 설정: ROS 버전을 지정 Colcon Tasks 설정: Colcon이 지원되는 Task를 사용을 위한 설정 File Associations 설정: ROS에서 사용되는 파일 확장자를 명시 설정 단축키: Ctrl + ‘,’ ROS Distribute 설정 Settings에서 ROS: Distro 검색 후에 현재 ROS 버전을 입력(예: foxy) Colcon 설정 Settings에서 Colcon: Provide Tasks를 검색 후 True로 체크 Files Associations 설정 Settings에서 Files: Associations 검색 후 다음과 같이 repos, world, xacro 를 추가 3) Task Setting(tasks.json) 설정 VSCode에서는 외부 프로그램을 Command Line Interface (CLI) 을 통해 연동하게 하는 기능이 있는데 이를 Task 라고 한다. 단순한 텍스트 에디터 기능이 기본인 VSCode가 다양한 기능을 수행하고 쉽게 기능 확장을 사용할 수 있게 된 것도 이 Task 기능이 있었기 때문이다. ROS Task 설정 Colcon: build Debug : 디버깅을 위한 빌드 설정 Colcon: build Release : 릴리즈를 위한 빌드 설정 Colcon: build RelWithDebInfo : 배포용으로 빌드하지만 디버깅도 가능하도록 용량을 최대로 줄여 빌드 Colcon: Test : Test 를 위한 빌드 설정 Colcon: Clean : Colcon Build 된 파일 및 폴더를 정리하도록 빌드 설정 빌드 Task 설정 단축키: Ctrl + Shift +B Build Task를 설정하기 위해 우선 Run Build Task (Ctrl + Shift +B) 을 실행하고 Configure Task를 선택하여 tasks.json을 다음과 같이 수정하여 ROS Colcon Build를 위한 Tasks를 설정한다. tasks.json (~/ros2_ws/.vscode/tasks.json) { \"version\": \"2.0.0\", \"tasks\": [ { \"label\": \"Colcon: build Debug\", \"type\": \"shell\", \"command\": \"colcon build --cmake-args '-DCMAKE_BUILD_TYPE=Debug'\", \"problemMatcher\": [], \"group\": { \"kind\": \"build\", \"isDefault\": false } }, \t\t{ \"label\": \"Colcon: build Release\", \"type\": \"shell\", \"command\": \"colcon build --cmake-args '-DCMAKE_BUILD_TYPE=Release'\", \"problemMatcher\": [], \"group\": { \"kind\": \"build\", \"isDefault\": false } }, \t\t{ \"label\": \"Colcon: build RelWithDebInfo\", \"type\": \"shell\", \"command\": \"colcon build --cmake-args '-DCMAKE_BUILD_TYPE=RelWithDebInfo'\", \"problemMatcher\": [], \"group\": { \"kind\": \"build\", \"isDefault\": false } }, { \"label\": \"Colcon: Test\", \"type\": \"shell\", \"command\": \"colcon test &amp;&amp; colcon test-result\" }, { \"label\": \"Colcon: Clean\", \"type\": \"shell\", \"command\": \"rm -rf build install log\" } ] } 4) Launch Setting(launch.json) 설정 VSCode에서의 Launch는 ‘Run and Debug’ (Ctrl + Shift + d)에서 사용되는 실행 명령어로 언어별, 디버거별로 설정이 가능하고 세부 옵션으로 Launch가 실행되기 전 즉 디버깅하기 전에 사용할 Task를 지정하거나 콘솔 기능을 설정할 수도 있다. Launch 설정 Debug-rclpy(debugpy) : debugpy를 이용해 rclpy를 디버깅 Debug-rclcpp(gbd) : gdb를 이용핸 rclcpp를 디버깅하고 디버깅 전 미리 colcon build debug를 수행 launch.json (~/ros2_ws/.vscode/launch.json){ \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"ROS: Attach\", \"type\": \"ros\", \"request\": \"attach\" }, { \"name\": \"ROS: Launch\", \"type\": \"ros\", \"request\": \"launch\", \"target\": \"/home/username/ros2_ws/src/test_pkg/test_pkg.launch\" }, { \"name\": \"Debug-rclpy(debugpy)\", \"type\": \"python\", \"request\": \"launch\", \"program\": \"${file}\", \"console\": \"integratedTerminal\" }, { \"name\": \"Debug-rclcpp(gbd)\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"${workspaceFolder}/install/${input:package}/lib/${input:package}/${input:node}\", \"args\": [], \"preLaunchTask\": \"Colcon: build Debug\", \"stopAtEntry\": true, \"cwd\": \"${workspaceFolder}\", \"externalConsole\": false, \"MIMode\": \"gdb\", \"setupCommands\": [ { \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true } ] } ], \"inputs\": [ { \"id\": \"package\", \"type\": \"promptString\", \"description\": \"Input ROS2 Package Name you want to debugging\", \"default\": \"ROS Package Name\" }, { \"id\": \"node\", \"type\": \"promptString\", \"description\": \"Input ROS Node Name you want to debugging\", \"default\": \"ROS Node Name\" } ] }3. VS Code에서 ROS 명령 실행1) ROS Core 실행 ROS 2에서는 Core 실행이 필요 없지만 ROS 2 Daemon을 시작하여 ROS 2 Foxy Status 출력을 위해 사용함 (생략 가능) Ctrl + Shift + P 실행 후 ‘ROS: Start’ 입력 VS Code 하단 파란 바에 ROS2.foxy 왼쪽에 체크표시가 있으면 ROS Core가 가동중이고, 그곳을 누르면 ROS Core의 정보가 출력됨(ROS Parameters, Topics, Services)* *현재 ROS2.foxy 에서는 문제가 있어 status 출력이 되지 않는것 같음 2) ROS Core 중단 ROS 2에서는 Core 중단이 필요 없지만 ROS 2 Daemon을 중단하여 ROS 2 Foxy Status 출력을 중지시키기 위해 사용함 (생략 가능) Ctrl + Shift + P 실행 후 ‘ROS: Stop’ 입력 ROS Core 를 중단함3) 새로운 ROS Package 생성 Ctrl + Shift + P 실행 후 ‘ROS: Create Catkin Package’ 입력 새로운 ROS Package를 생성함 Package name : 생성할 package의 이름을 입력 Dependencies : 생성할 package의 의존성 package를 입력(예: roscpp, rviz, nav_msgs 등) 4) ROS Node 실행(rosrun) Ctrl + Shift + P 실행 후 ‘ROS: Run a ROS executable (rosrun)’ 입력 실행가능한 ROS Node를 구동 Choose a package : 실행할 ROS Node의 package를 입력 Choose an executable : 실행할 ROS Node 파일 입력 Enter any extra arguments : 추가적으로 넣을 arguments들을 입력 5) ROS Launch 실행(roslaunch) Ctrl + Shift + P 실행 후 ‘ROS: Run a ROS launch file (roslaunch)’ 입력 ROS Launch 파일 구동 Choose a package : 실행할 ROS Launch파일의 package를 입력 Choose a launch file : 실행할 ROS Launch파일 입력 Enter any extra arguments : 추가적으로 넣을 arguments들을 입력 6) ROS Build (Colcon Build) Ctrl + Shift + B 실행 후, 상황에 맞게 ‘Colcon: build Option’ 입력 Colcon Build Options Colcon: build Debug : 디버깅 가능하도록 빌드 Colcon: build Release : 디버깅이 되지 않는 배포용 빌드 Colcon: build RelWithDebInfo : 배포용으로 빌드하지만 디버깅도 가능하도록 용량을 최대로 줄여 빌드 4. ROS Debugging in VS Code 우선적으로 Colcon: build Debug 나 build RelWithDebInfo 로 코드를 Build 한다 Ctrl + Shift + B 실행 후, 상황에 맞게 ‘Colcon: build Debug’ 입력 1) ROS Attach 방법 디버깅할 소스코드에 Break 포인트를 걸어두고, 해당 코드의 ROS Node를 실행 Ctrl + Shift + P 실행 후 ‘ROS: Run a ROS executable (rosrun)’ 입력 Choose a package : 디버깅할 ROS Node의 package를 입력 (예시: beginner_tutorials) Choose an executable : 디버깅할 ROS Node 파일 입력 (예시: talker) VS Code의 Run and Debug (’Ctrl + Shift + D’)로 이동 ‘ROS: Attach’를 선택하고 디버깅 플레이버튼 누름 Choose Runtime type of node to attach to 에는 현재 디버깅할 ROS Node의 Type을 선택(C++, Python) Select the process to attach to 에는 위에서 실행했던 ROS Node의 이름(예시: talker)을 입력 및 선택하여 구동중인 ROS Node Process에 Debugger를 붙여 Debugging을 시작2) ROS Task 방법 ROS Cpp 파일 디버깅할 소스코드에 Break 포인트 설정 VS Code의 Run and Debug (’Ctrl + Shift + D’)로 이동 ‘Debug-rclcpp(gbd)’를 선택하고 디버깅 플레이버튼 누름 ROS Package Name 에 디버깅할 ROS Node의 Package 이름을 입력 ROS Node Name 에 디버깅할 ROS Node의 이름을 입력하면 ROS Node가 실행되며 Break 포인트가 걸려 디버깅이 시작 ROS Py 파일 디버깅할 소스코드에 Break 포인트 설정 VS Code의 Run and Debug (’Ctrl + Shift + D’)로 이동 ‘Debug-rclpy(debugpy)’를 선택하고 디버깅 플레이버튼 누름 ROS Package Name 에 디버깅할 ROS Node의 Package 이름을 입력 ROS Node Name 에 디버깅할 ROS Node의 이름을 입력하면 ROS Node가 실행되며 Break 포인트가 걸려 디버깅이 시작 3) ROS Launch 파일 Debugging 디버깅할 소스코드에 Break 포인트 설정 VS Code의 Run and Debug (’Ctrl + Shift + D’)로 이동 Debug Type을 ‘ROS: Launch’로 설정하고 그 오른쪽에 있는 톱니바퀴를 눌러 launch.json 파일을 오픈 launch.json 파일 안에 ROS: Launch Configuration 항목 중, “target” 에 디버깅에 사용할 Launch 파일의 절대 경로를 입력하고 저장 F5 버튼이나 ‘ROS: Launch’를 선택하고 디버깅 플레이버튼 눌러 디버깅 시작 Launch 파일이 실행되며 위에서 설정한 Break 포인트에 디버깅 걸림 현재 VS Code의 ROS Extension의 버전 (0.8.2)에 문제가 있어 ROS2 Launch파일 디버깅이 안됨 Ros 2 Launch파일 디버깅을 위해 임시로 ROS Extension의 버전을 0.6.8 로 다운그레이드 하여 사용해야함 ROS Extension 0.6.8로 다운그레이드 하는 방법 VS Code의 왼쪽 메뉴바 중 Extension 아이콘을 선택해 현재 설치해놓은 Extension 중 ROS Extension을 선택 ROS Extension에 있는 톱니바퀴를 눌러 “Install Another Version”를 누른 후, 0.6.8 버전으로 설치 후 Reload Required 선택 " }, { "title": "Ros1 Environment Settings For Vscode", "url": "/posts/ros1-environment-settings-for-vscode/", "categories": "", "tags": "", "date": "2022-03-24 00:00:00 +0900", "snippet": "VS Code용 ROS1 환경설정 및 Debug 설정방법1. Visual Studio Code 설치 VS Code를 다운로드 및 설치 (https://code.visualstudio.com/Download) VS Code 실행하여 Extensions 설치 C/C++/Python Extensions (VS Code Extensions for C++ and Python) Name Code Name Description C/C++ ms-vscode.cpptools C/C ++ IntelliSense, 디버깅 및 코드 검색 CMake twxs.cmake CMake 언어 지원 CMake Tools ms-vscode.cmake-tools CMake 언어 지원 및 다양한 툴 Python ms-python.python 린팅, 디버깅, Intellisense, 코드 서식 지정, 리팩토링, 단위 테스트 등 ROS Extensions (VS Code Extensions for ROS, URDF, Colcon) Name Code Name Description ROS ms-iot.vscode-ros ROS 개발 지원 URDF smilerobotics.urdf URDF / xacro 지원 File Format Extensions (VS Code Extensions for XML, YAML, Markdown) Name Code Name Description XML Tools dotjoshjohnson.xml XML, XQuery, XPath 지원 YAML redhat.vscode-yaml YAML 지원 Markdown All in One yzhang.markdown-all-in-one Markdown 지원 유용한 Extensions (VS Code Extensions for Etc.) Name Code Name Description Highlight Trailing White Spaces ybaumes.highlight-trailing-white-spaces 의미 없이 사용된 공백의 스페이스 문자 강조 EOF Mark msfukui.eof-mark [EOF]이 없이 끝난 파일에 [EOF] 문자 추가 Better Comments aaron-bond.better-comments alert, informational, TODO 등의 코멘트 강화 기능 2. Visual Studio Code 개발환경 설정1) ROS WorkSpace 설정 Visual Studio Code에서 File에서 “ Add Folder to Workspace”를 선택하여 ROS 설치시 설정한 catkin_ws 폴더를 연다. Workspace 폴더명 예시: /home/username/catkin_ws 2) User Setting(Settings.json) 설정 ‘settings.json’은 VSCode의 사용자별 글로벌 환경 설정을 지정하는 파일이다. 이 파일에 기술된 설정들은 모든 작업 공간(workspace)에서 적용된다. 예를 들어, 미니맵 사용, 세로 제한 줄 표시, 탭 사이즈 등 이다. ROS 관련 설정 ROS Distibute 설정: ROS 버전을 지정 File Associations 설정: ROS에서 사용되는 파일 확장자를 명시 설정 단축키: Ctrl + ‘,’ ROS Distribute 설정 Settings에서 ROS: Distro 검색 후에 현재 ROS 버전을 입력(예: kinetic) Files Associations 설정 Settings에서 Files: Associations 검색 후 다음과 같이 repos, world, xacro 를 추가 3) Task Setting(tasks.json) 설정 VSCode에서는 외부 프로그램을 Command Line Interface (CLI) 을 통해 연동하게 하는 기능이 있는데 이를 Task 라고 한다. 단순한 텍스트 에디터 기능이 기본인 VSCode가 다양한 기능을 수행하고 쉽게 기능 확장을 사용할 수 있게 된 것도 이 Task 기능이 있었기 때문이다. ROS Task 설정 Catkin_make: Debug : 디버깅을 위한 빌드 설정 Catkin_make: Release : 릴리즈를 위한 빌드 설정 Catkin_make: RelWithDebInfo : 배포용으로 빌드하지만 디버깅도 가능하도록 용량을 최대로 줄여 빌드 Catkin_make: Clean : Build 된 파일 및 폴더를 정리하도록 빌드 설정 빌드 Task 설정 단축키: Ctrl + Shift +B Build Task를 설정하기 위해 우선 Run Build Task (Ctrl + Shift +B) 을 실행하고 Configure Task를 선택하여 tasks.json을 다음과 같이 수정하여 ROS Colcon Build를 위한 Tasks를 설정한다. tasks.json (~/catkin_make/.vscode/tasks.json) { \"version\": \"2.0.0\", \"tasks\": [ { \"label\": \"Catkin_make: Debug\", \"type\": \"shell\", \"command\": \"catkin_make\", \"args\": [ \"-j12\", \"-DCMAKE_BUILD_TYPE=Debug\", \"-DCMAKE_EXPORT_COMPILE_COMMANDS=1\", \"-DCMAKE_CXX_STANDARD=14\" ], \"problemMatcher\": [], \"group\": { \"kind\": \"build\", \"isDefault\": false } }, { \"label\": \"Catkin_make: Release\", \"type\": \"shell\", \"command\": \"catkin_make\", \"args\": [ \"-j12\", \"-DCMAKE_BUILD_TYPE=Release\", \"-DCMAKE_EXPORT_COMPILE_COMMANDS=1\", \"-DCMAKE_CXX_STANDARD=14\" ], \"problemMatcher\": [], \"group\": { \"kind\": \"build\", \"isDefault\": false } }, { \"label\": \"Catkin_make: RelWithDebInfo\", \"type\": \"shell\", \"command\": \"catkin_make\", \"args\": [ \"-j12\", \"-DCMAKE_BUILD_TYPE=RelWithDebInfo\", \"-DCMAKE_EXPORT_COMPILE_COMMANDS=1\", \"-DCMAKE_CXX_STANDARD=14\" ], \"problemMatcher\": [], \"group\": { \"kind\": \"build\", \"isDefault\": false } }, { \"label\": \"Catkin_make: Clean\", \"type\": \"shell\", \"command\": \"rm -rf build devel install\" } ] } 4) Launch Setting(launch.json) 설정 VSCode에서의 Launch는 ‘Run and Debug’ (Ctrl + Shift + d)에서 사용되는 실행 명령어로 언어별, 디버거별로 설정이 가능하고 세부 옵션으로 Launch가 실행되기 전 즉 디버깅하기 전에 사용할 Task를 지정하거나 콘솔 기능을 설정할 수도 있다. Launch 설정 ROS: Attach : 실행중인 ROS Node에 디버거를 붙여 디버깅 ROS: Launch : ROS Launch 파일을 Target에 설정해 디버깅 Debug-rclpy(debugpy) : debugpy를 이용해 rclpy를 디버깅 Debug-rclcpp(gbd) : gdb를 이용핸 rclcpp를 디버깅하고 디버깅 전 미리 Catkin_make: RelWithDebInfo를 수행 launch.json (~/catkin_ws/.vscode/launch.json){ \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"ROS: Attach\", \"type\": \"ros\", \"request\": \"attach\" }, { \"name\": \"ROS: Launch\", \"request\": \"launch\", \"target\": \"/home/username/catkin_ws/src/test_pkg/launch/test_pkg.launch\", \"type\": \"ros\" }, { \"name\": \"Debug-rospy(debugpy)\", \"type\": \"python\", \"request\": \"launch\", \"program\": \"${file}\", \"console\": \"integratedTerminal\" }, { \"name\": \"Debug-roscpp(gbd)\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"${workspaceFolder}/devel/lib/${input:package}/${input:node}\", \"args\": [], \"preLaunchTask\": \"Catkin_make: RelWithDebInfo\", \"stopAtEntry\": true, \"cwd\": \"${workspaceFolder}\", \"externalConsole\": false, \"MIMode\": \"gdb\", \"setupCommands\": [ { \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true } ] } ], \"inputs\": [ { \"id\": \"package\", \"type\": \"promptString\", \"description\": \"Input ROS Package Name you want to debugging\", \"default\": \"ROS Package Name\" }, { \"id\": \"node\", \"type\": \"promptString\", \"description\": \"Input ROS Node Name you want to debugging\", \"default\": \"ROS Node Name\" } ]}3. VS Code에서 ROS 명령 실행1) ROS Core 실행 Ctrl + Shift + P 실행 후 ‘ROS: Start’ 입력 VS Code 하단 파란 바에 ROS1.kinetic 왼쪽에 체크표시가 있으면 ROS Core가 가동중이고, 그곳을 누르면 ROS Core의 정보가 출력됨(ROS Parameters, Topics, Services) 2) ROS Core 중단 Ctrl + Shift + P 실행 후 ‘ROS: Stop’ 입력 ROS Core 를 중단함3) 새로운 ROS Package 생성 Ctrl + Shift + P 실행 후 ‘ROS: Create Catkin Package’ 입력 새로운 ROS Package를 생성함 Package name : 생성할 package의 이름을 입력 Dependencies : 생성할 package의 의존성 package를 입력(예: roscpp, rviz, nav_msgs 등) 4) ROS Node 실행(rosrun) Ctrl + Shift + P 실행 후 ‘ROS: Run a ROS executable (rosrun)’ 입력 실행가능한 ROS Node를 구동 Choose a package : 실행할 ROS Node의 package를 입력 Choose an executable : 실행할 ROS Node 파일 입력 Enter any extra arguments : 추가적으로 넣을 arguments들을 입력 5) ROS Launch 실행(roslaunch) Ctrl + Shift + P 실행 후 ‘ROS: Run a ROS launch file (roslaunch)’ 입력 ROS Launch 파일 구동 Choose a package : 실행할 ROS Launch파일의 package를 입력 Choose a launch file : 실행할 ROS Launch파일 입력 Enter any extra arguments : 추가적으로 넣을 arguments들을 입력 6) ROS Build (Colcon Build) Ctrl + Shift + B 실행 후, 상황에 맞게 Catkin_make: Build Option’ 입력 Catkin_make Build Options Catkin_make: Debug : 디버깅 가능하도록 빌드 Catkin_make: Release : 디버깅이 되지 않는 배포용 빌드 Catkin_make: RelWithDebInfo : 배포용으로 빌드하지만 디버깅도 가능하도록 용량을 최대로 줄여 빌드 Catkin_make: Clean : Build된 파일 및 폴더를 삭제 4. ROS Debugging in VS Code 우선적으로 Catkin_make: Debug나 RelWithDebInfo로 코드를 Build 한다 Ctrl + Shift + B 실행 후, 상황에 맞게 ‘Catkin_make: Debug’ 입력 1) ROS Attach 방법 디버깅할 소스코드에 Break 포인트를 걸어두고, 해당 코드의 ROS Node를 실행 Ctrl + Shift + P 실행 후 ‘ROS: Run a ROS executable (rosrun)’ 입력 Choose a package : 디버깅할 ROS Node의 package를 입력 (예시: beginner_tutorials) Choose an executable : 디버깅할 ROS Node 파일 입력 (예시: talker) VS Code의 Run and Debug (’Ctrl + Shift + D’)로 이동 ‘ROS: Attach’를 선택하고 디버깅 플레이버튼 누름 Choose Runtime type of node to attach to 에는 현재 디버깅할 ROS Node의 Type을 선택(C++, Python) Select the process to attach to 에는 위에서 실행했던 ROS Node의 이름(예시: talker)을 입력 및 선택하여 구동중인 ROS Node Process에 Debugger를 붙여 Debugging을 시작2) ROS Task 방법 ROS Cpp 파일 디버깅할 소스코드에 Break 포인트 설정 VS Code의 Run and Debug (’Ctrl + Shift + D’)로 이동 ‘Debug-roscpp(gbd)’를 선택하고 디버깅 플레이버튼 누름 ROS Package Name 에 디버깅할 ROS Node의 Package 이름을 입력 ROS Node Name 에 디버깅할 ROS Node의 이름을 입력하면 ROS Node가 실행되며 Break 포인트가 걸려 디버깅이 시작 ROS Py 파일 디버깅할 소스코드에 Break 포인트 설정 VS Code의 Run and Debug (’Ctrl + Shift + D’)로 이동 ‘Debug-rospy(debugpy)’를 선택하고 디버깅 플레이버튼 누름 ROS Package Name 에 디버깅할 ROS Node의 Package 이름을 입력 ROS Node Name 에 디버깅할 ROS Node의 이름을 입력하면 ROS Node가 실행되며 Break 포인트가 걸려 디버깅이 시작 3) ROS Launch 파일 Debugging 디버깅할 소스코드에 Break 포인트 설정 VS Code의 Run and Debug (’Ctrl + Shift + D’)로 이동 Debug Type을 ‘ROS: Launch’로 설정하고 그 오른쪽에 있는 톱니바퀴를 눌러 launch.json 파일을 오픈 launch.json 파일 안에 ROS: Launch Configuration 항목 중, “target” 에 디버깅에 사용할 Launch 파일의 절대 경로를 입력하고 저장 F5 버튼이나 ‘ROS: Launch’를 선택하고 디버깅 플레이버튼 눌러 디버깅 시작 Launch 파일이 실행되며 위에서 설정한 Break 포인트에 디버깅 걸림 " }, { "title": "Welcome", "url": "/posts/Welcome/", "categories": "", "tags": "", "date": "2022-03-21 00:00:00 +0900", "snippet": "Hello Neoplanetz Github World 테스트로 작성 중입니다. 잘 되는가요? 앞으로 지속적으로 작성할수 있길 바람!" } ]
